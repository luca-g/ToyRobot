// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ToyRobot.SqlServerModel.DB
{
    public partial class ToyRobotDbContext : DbContext
    {
        public ToyRobotDbContext()
        {
        }

        public ToyRobotDbContext(DbContextOptions<ToyRobotDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Command> Command { get; set; }
        public virtual DbSet<Map> Map { get; set; }
        public virtual DbSet<Player> Player { get; set; }
        public virtual DbSet<Robot> Robot { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=ToyRobot.SqlServerDB;Integrated Security=true");

            modelBuilder.Entity<Command>(entity =>
            {
                entity.ToTable("Command", "log");

                entity.Property(e => e.CommandDate).HasColumnType("datetime");

                entity.Property(e => e.CommandResult).HasMaxLength(255);

                entity.Property(e => e.CommandText).HasMaxLength(255);

                entity.Property(e => e.RobotDeletionDate).HasColumnType("datetime");

                entity.HasOne(d => d.Robot)
                    .WithMany(p => p.Command)
                    .HasForeignKey(d => d.RobotId)
                    .HasConstraintName("FK_Command_Robot");
            });

            modelBuilder.Entity<Map>(entity =>
            {
                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeletionDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Player>(entity =>
            {
                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeletionDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Robot>(entity =>
            {
                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeletionDate).HasColumnType("datetime");

                entity.HasOne(d => d.Map)
                    .WithMany(p => p.Robot)
                    .HasForeignKey(d => d.MapId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Robot_Map");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.Robot)
                    .HasForeignKey(d => d.PlayerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Robot_Player");
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}