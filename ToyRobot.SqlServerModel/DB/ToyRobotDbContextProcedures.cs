// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using ToyRobot.SqlServerModel.DB;

namespace ToyRobot.SqlServerModel.DB
{
    public partial class ToyRobotDbContext
    {
        private ToyRobotDbContextProcedures _procedures;

        public virtual ToyRobotDbContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ToyRobotDbContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ToyRobotDbContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DEV_ClearDatabaseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<LoadMapsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<LoadRobotsResult>().HasNoKey().ToView(null);
        }
    }

    public interface IToyRobotDbContextProceduresContract
    {
        Task<List<DEV_ClearDatabaseResult>> DEV_ClearDatabaseAsync(CancellationToken cancellationToken = default);
        Task<List<LoadMapsResult>> LoadMapsAsync(int? playerId, CancellationToken cancellationToken = default);
        Task<List<LoadRobotsResult>> LoadRobotsAsync(int? playerId, int? robotId, int? mapId, CancellationToken cancellationToken = default);
    }

    public partial class ToyRobotDbContextProcedures
    {
        private readonly ToyRobotDbContext _context;

        public ToyRobotDbContextProcedures(ToyRobotDbContext context)
        {
            _context = context;
        }

        public virtual async Task<List<DEV_ClearDatabaseResult>> DEV_ClearDatabaseAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = returnValue?._value,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DEV_ClearDatabaseResult>("EXEC @returnValue = [dbo].[DEV_ClearDatabase]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<LoadMapsResult>> LoadMapsAsync(int? playerId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = returnValue?._value,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "playerId",
                    Value = playerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<LoadMapsResult>("EXEC @returnValue = [dbo].[LoadMaps] @playerId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<LoadRobotsResult>> LoadRobotsAsync(int? playerId, int? robotId, int? mapId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = returnValue?._value,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "playerId",
                    Value = playerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "robotId",
                    Value = robotId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "mapId",
                    Value = mapId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<LoadRobotsResult>("EXEC @returnValue = [dbo].[LoadRobots] @playerId, @robotId, @mapId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
